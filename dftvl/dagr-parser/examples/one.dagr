profile PROF1 { 
  device 'CLOSURE'; 
  import closure;
  global dummy;
  namespace 'gma' 'urn:gma:1.0';
}

pipeline P1 {
  entry => B1 | match(None,x'.//gma:SDHBWPDU') != None;
  B1    => exit;
}

block B1 {
  apply_acl;
  redact_altitude;
}

table gaps_acl {
  | mux | sec | typ | op       |
--|-----+-----+-----+----------|
  | 1   | 1   |  1  | 'deny'   |
  | 1   | 1   |  2  | 'allow'  |
  | 2   | 2   |  1  | 'redact' |  
}

rule redact_altitude {
  h = match(None, x'.//gma:SDHBWHeader');
  m = match(h, x'./tagm');
  s = match(h, x'./tags');
  t = match(h, x'./tagt');
  p = match(None, x'.//gma:Position');
  x = match(p, x'./x');
  y = match(p, x'./y');
  z = match(p, x'./z');

  if ((m == 2) and (s == 2) and (t == 1)) then {
    replace(x, 0.0); 
    replace(y, 0.0); 
    replace(z, 0.0); 
  };
}

rule apply_acl {
  h = match(None, x'.//gma:SDHBWHeader');
  m = match(hdr, x'./tagm');
  s = match(hdr, x'./tags');
  t = match(hdr, x'./tagt');
  r = [x for x from gaps_acl where (x.mux == m) and (x.sec == s) and (x.typ == t) and (x.op in ['allow', 'redact'])];

  if r == [] then drop();
}

